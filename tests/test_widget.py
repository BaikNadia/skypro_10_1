import pytest
from src.widget import mask_account_card, get_date


import pytest

# Параметризованные тесты для корректных данных
@pytest.mark.parametrize("info, expected", [
    ("Visa Platinum 7000792289606361", "7000 79** **** 6361"),  # Карта
    ("Maestro 7000792289606361", "7000 79** **** 6361"),       # Другая карта
    ("Счет 73654108430135874305", "**4305"),                   # Счет
    ("Счет 123456789012", "**9012"),                            # Короткий номер счета
])
def test_mask_account_card_valid(info, expected):
    """
    Проверяет корректность маскировки номеров карт и счетов.
    """
    result = mask_account_card(info)
    assert result == expected, f"Ошибка при маскировании: {info}"


# Параметризованные тесты для корректных данных
@pytest.mark.parametrize("date_str, expected", [
    ("2023-01-15T14:23:01", "15.01.2023"),  # Корректная дата
    ("2023-12-31T23:59:59", "31.12.2023"),   # Другая корректная дата
    ("2023-03-01T00:00:00", "01.03.2023"),   # Начало месяца
    ("2023-02-28T00:00:00", "28.02.2023"),   # Конец февраля (не високосный год)
    ("2024-02-29T00:00:00", "29.02.2024"),   # Високосный год
])
def test_get_date_valid(date_str, expected):
    """
    Проверяет правильность преобразования даты для корректных входных данных.
    """
    result = get_date(date_str)
    assert result == expected, f"Ошибка при преобразовании даты: {date_str}"

# Параметризованные тесты для некорректных данных
@pytest.mark.parametrize("date_str", [
    "invalid_date",      # Некорректная строка
    "",                  # Пустая строка
    "   ",               # Пробельные символы
    None,                # None вместо строки
    "2023-13-01T00:00:00",  # Недопустимый месяц
    "2023-02-30T00:00:00",   # Недопустимый день
    "2023-02-29T00:00:00",   # Невалидная дата (не високосный год)
    "2023/01/15",           # Неверный формат даты
    "2023-01-15T",           # Отсутствует время
])
def test_get_date_invalid(date_str):
    """
    Проверяет обработку ошибок для некорректных входных данных.
    """
    result = get_date(date_str)
    assert result == "Некорректный формат даты", f"Ошибка при обработке: {date_str}"

# Тестирование граничных случаев
def test_get_date_edge_cases():
    """
    Проверяет работу функции для граничных случаев.
    """
    # Минимальная дата
    min_date = "0001-01-01T00:00:00"
    result = get_date(min_date)
    assert result == "01.01.0001", "Ошибка при обработке минимальной даты"

    # Максимальная дата (ограничение зависит от системы)
    max_date = "9999-12-31T23:59:59"
    result = get_date(max_date)
    assert result == "31.12.9999", "Ошибка при обработке максимальной даты"

    # Дата без времени
    date_without_time = "2023-01-15T"
    result = get_date(date_without_time)
    assert result == "Некорректный формат даты", "Ошибка при обработке даты без времени"

